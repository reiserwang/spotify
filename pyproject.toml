[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spotify-smart-player"
version = "0.1.0"
description = "An intelligent Spotify companion for music discovery and analysis"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["spotify", "music", "analysis", "flask", "web-app"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Framework :: Flask",
]

dependencies = [
    "async-timeout>=4.0.2",
    "cachelib>=0.9.0",
    "certifi>=2023.7.22",
    "charset-normalizer>=2.1.1",
    "click>=8.1.3",
    "colorama>=0.4.5",
    "deprecated>=1.2.13",
    "flask>=2.2.5",
    "flask-session>=0.4.0",
    "idna>=3.7",
    "importlib-metadata>=4.12.0",
    "itsdangerous>=2.1.2",
    "jinja2>=3.1.3",
    "markupsafe>=2.1.1",
    "matplotlib",
    "numpy",
    "packaging>=21.3",
    "prettytable",
    "prompt-toolkit",
    "pyparsing>=3.0.9",
    "redis>=4.4.4",
    "requests>=2.32.4",
    "six>=1.16.0",
    "spotipy>=2.25.1",
    "urllib3>=2.5.0",
    "werkzeug>=2.2.2",
    "wrapt>=1.14.1",
    "zipp>=3.19.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
]

[project.urls]
Homepage = "https://github.com/yourusername/spotify-smart-player"
Repository = "https://github.com/yourusername/spotify-smart-player"
Issues = "https://github.com/yourusername/spotify-smart-player/issues"

[tool.hatch.build.targets.wheel]
include = [
    "*.py",
    "template/",
    "static/",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--strict-config",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]